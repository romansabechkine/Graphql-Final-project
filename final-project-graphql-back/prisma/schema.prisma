// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @unique @default(uuid())
  password  String
  username  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  likes     Like[]
  session   Session?
  comments  Comment[]
}

model Session {
  id             String   @id @unique @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  token          String
  tokenExpiresAt DateTime @default(now())
}

model Article {
  id            String          @id @unique @default(uuid())
  title         String
  body          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  likes         Like[]
  likesQuantity LikesQuantity?
  comments      Comment[]
}

model LikesQuantity {
  id                Int     @id @unique @default(autoincrement())
  likeType          String
  numberOfLikeType  Int     @default(1)
  article           Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId         String  @unique
}

model Like {
  id        String  @id @unique @default(uuid())
  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  likeType String
}

model Comment {
  id        String  @id @unique @default(uuid())
  body      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  authorId    String
  articleId String
  author     User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
}
